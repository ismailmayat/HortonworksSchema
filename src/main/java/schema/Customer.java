/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4519144157292049665L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"schema\",\"fields\":[{\"name\":\"customerId\",\"type\":\"int\",\"doc\":\"Identifier for reference\"},{\"name\":\"firstName\",\"type\":\"string\",\"doc\":\"First Name of user\"},{\"name\":\"lastName\",\"type\":\"string\",\"doc\":\"Last name of user\"},{\"name\":\"email\",\"type\":\"string\",\"doc\":\"Email address of user\"},{\"name\":\"update\",\"type\":\"string\",\"doc\":\"Update timestamp (as a string)\"},{\"name\":\"epoch\",\"type\":\"int\",\"doc\":\"How often has this user been updated?\"}],\"doc:\":\"Schema of user\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Customer> ENCODER =
      new BinaryMessageEncoder<Customer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Customer> DECODER =
      new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Customer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Customer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Customer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Customer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Customer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Customer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Customer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Identifier for reference */
  private int customerId;
  /** First Name of user */
  private java.lang.CharSequence firstName;
  /** Last name of user */
  private java.lang.CharSequence lastName;
  /** Email address of user */
  private java.lang.CharSequence email;
  /** Update timestamp (as a string) */
  private java.lang.CharSequence update;
  /** How often has this user been updated? */
  private int epoch;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Customer() {}

  /**
   * All-args constructor.
   * @param customerId Identifier for reference
   * @param firstName First Name of user
   * @param lastName Last name of user
   * @param email Email address of user
   * @param update Update timestamp (as a string)
   * @param epoch How often has this user been updated?
   */
  public Customer(java.lang.Integer customerId, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.CharSequence email, java.lang.CharSequence update, java.lang.Integer epoch) {
    this.customerId = customerId;
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.update = update;
    this.epoch = epoch;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return firstName;
    case 2: return lastName;
    case 3: return email;
    case 4: return update;
    case 5: return epoch;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = (java.lang.Integer)value$; break;
    case 1: firstName = (java.lang.CharSequence)value$; break;
    case 2: lastName = (java.lang.CharSequence)value$; break;
    case 3: email = (java.lang.CharSequence)value$; break;
    case 4: update = (java.lang.CharSequence)value$; break;
    case 5: epoch = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return Identifier for reference
   */
  public int getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * Identifier for reference
   * @param value the value to set.
   */
  public void setCustomerId(int value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return First Name of user
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * First Name of user
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return Last name of user
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * Last name of user
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return Email address of user
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * Email address of user
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'update' field.
   * @return Update timestamp (as a string)
   */
  public java.lang.CharSequence getUpdate() {
    return update;
  }


  /**
   * Sets the value of the 'update' field.
   * Update timestamp (as a string)
   * @param value the value to set.
   */
  public void setUpdate(java.lang.CharSequence value) {
    this.update = value;
  }

  /**
   * Gets the value of the 'epoch' field.
   * @return How often has this user been updated?
   */
  public int getEpoch() {
    return epoch;
  }


  /**
   * Sets the value of the 'epoch' field.
   * How often has this user been updated?
   * @param value the value to set.
   */
  public void setEpoch(int value) {
    this.epoch = value;
  }

  /**
   * Creates a new Customer RecordBuilder.
   * @return A new Customer RecordBuilder
   */
  public static schema.Customer.Builder newBuilder() {
    return new schema.Customer.Builder();
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Customer RecordBuilder
   */
  public static schema.Customer.Builder newBuilder(schema.Customer.Builder other) {
    if (other == null) {
      return new schema.Customer.Builder();
    } else {
      return new schema.Customer.Builder(other);
    }
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Customer instance.
   * @param other The existing instance to copy.
   * @return A new Customer RecordBuilder
   */
  public static schema.Customer.Builder newBuilder(schema.Customer other) {
    if (other == null) {
      return new schema.Customer.Builder();
    } else {
      return new schema.Customer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Customer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    /** Identifier for reference */
    private int customerId;
    /** First Name of user */
    private java.lang.CharSequence firstName;
    /** Last name of user */
    private java.lang.CharSequence lastName;
    /** Email address of user */
    private java.lang.CharSequence email;
    /** Update timestamp (as a string) */
    private java.lang.CharSequence update;
    /** How often has this user been updated? */
    private int epoch;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(schema.Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.update)) {
        this.update = data().deepCopy(fields()[4].schema(), other.update);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.epoch)) {
        this.epoch = data().deepCopy(fields()[5].schema(), other.epoch);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Customer instance
     * @param other The existing instance to copy.
     */
    private Builder(schema.Customer other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.update)) {
        this.update = data().deepCopy(fields()[4].schema(), other.update);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.epoch)) {
        this.epoch = data().deepCopy(fields()[5].schema(), other.epoch);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'customerId' field.
      * Identifier for reference
      * @return The value.
      */
    public int getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * Identifier for reference
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public schema.Customer.Builder setCustomerId(int value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * Identifier for reference
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerId' field.
      * Identifier for reference
      * @return This builder.
      */
    public schema.Customer.Builder clearCustomerId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * First Name of user
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * First Name of user
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public schema.Customer.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.firstName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * First Name of user
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'firstName' field.
      * First Name of user
      * @return This builder.
      */
    public schema.Customer.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * Last name of user
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * Last name of user
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public schema.Customer.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lastName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * Last name of user
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastName' field.
      * Last name of user
      * @return This builder.
      */
    public schema.Customer.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * Email address of user
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * Email address of user
      * @param value The value of 'email'.
      * @return This builder.
      */
    public schema.Customer.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * Email address of user
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * Email address of user
      * @return This builder.
      */
    public schema.Customer.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'update' field.
      * Update timestamp (as a string)
      * @return The value.
      */
    public java.lang.CharSequence getUpdate() {
      return update;
    }


    /**
      * Sets the value of the 'update' field.
      * Update timestamp (as a string)
      * @param value The value of 'update'.
      * @return This builder.
      */
    public schema.Customer.Builder setUpdate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.update = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'update' field has been set.
      * Update timestamp (as a string)
      * @return True if the 'update' field has been set, false otherwise.
      */
    public boolean hasUpdate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'update' field.
      * Update timestamp (as a string)
      * @return This builder.
      */
    public schema.Customer.Builder clearUpdate() {
      update = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'epoch' field.
      * How often has this user been updated?
      * @return The value.
      */
    public int getEpoch() {
      return epoch;
    }


    /**
      * Sets the value of the 'epoch' field.
      * How often has this user been updated?
      * @param value The value of 'epoch'.
      * @return This builder.
      */
    public schema.Customer.Builder setEpoch(int value) {
      validate(fields()[5], value);
      this.epoch = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'epoch' field has been set.
      * How often has this user been updated?
      * @return True if the 'epoch' field has been set, false otherwise.
      */
    public boolean hasEpoch() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'epoch' field.
      * How often has this user been updated?
      * @return This builder.
      */
    public schema.Customer.Builder clearEpoch() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Customer build() {
      try {
        Customer record = new Customer();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.Integer) defaultValue(fields()[0]);
        record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lastName = fieldSetFlags()[2] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.update = fieldSetFlags()[4] ? this.update : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.epoch = fieldSetFlags()[5] ? this.epoch : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Customer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Customer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Customer>
    READER$ = (org.apache.avro.io.DatumReader<Customer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.customerId);

    out.writeString(this.firstName);

    out.writeString(this.lastName);

    out.writeString(this.email);

    out.writeString(this.update);

    out.writeInt(this.epoch);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.customerId = in.readInt();

      this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);

      this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);

      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.update = in.readString(this.update instanceof Utf8 ? (Utf8)this.update : null);

      this.epoch = in.readInt();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.customerId = in.readInt();
          break;

        case 1:
          this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);
          break;

        case 2:
          this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);
          break;

        case 3:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 4:
          this.update = in.readString(this.update instanceof Utf8 ? (Utf8)this.update : null);
          break;

        case 5:
          this.epoch = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










